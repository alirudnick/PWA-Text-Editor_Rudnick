if (!self.define) { let e, s = {}; const n = (n, i) => (n = new URL(n + ".js", i).href, s[n] || new Promise((s => { if ("document" in self) { const e = document.createElement("script"); e.src = n, e.onload = s, document.head.appendChild(e) } else e = n, importScripts(n), s() })).then((() => { let e = s[n]; if (!e) throw new Error(`Module ${n} didnâ€™t register its module`); return e }))); self.define = (i, r) => { const t = e || ("document" in self ? document.currentScript.src : "") || location.href; if (s[t]) return; let l = {}; const d = e => n(e, t), o = { module: { uri: t }, exports: l, require: d }; s[t] = Promise.all(i.map((e => o[e] || d(e)))).then((e => (r(...e), l))) } } define(["./workbox-904f8752"], (function (e) { "use strict"; self.addEventListener("message", (e => { e.data && "SKIP_WAITING" === e.data.type && self.skipWaiting() })), e.precacheAndRoute([{ url: "index.html", revision: "84739d98677865b5cd9a3282fdc4cd38" }, { url: "install.bundle.js", revision: "1dfa84824b530b3687f70520b9636b1b" }, { url: "install.bundle.js.LICENSE.txt", revision: "4e0e34f265fae8f33b01b27ae29d9d6f" }, { url: "main.bundle.js", revision: "253c9455b34317e54664bc7f87ded209" }, { url: "main.bundle.js.LICENSE.txt", revision: "4e0e34f265fae8f33b01b27ae29d9d6f" }, { url: "src-sw.js", revision: "328a0f08e35a0c8348db9dc480618c3b" }], {}), e.registerRoute(/\.(?:png|jpg|jpeg|svg)$/, new e.CacheFirst({ cacheName: "images", plugins: [new e.ExpirationPlugin({ maxEntries: 2 })] }), "GET") }));
